// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: domain/policy.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OptType int32

const (
	OptType_EQ      OptType = 0
	OptType_NE      OptType = 1
	OptType_IN      OptType = 2
	OptType_MIN     OptType = 3
	OptType_REGULAR OptType = 4
)

// Enum value maps for OptType.
var (
	OptType_name = map[int32]string{
		0: "EQ",
		1: "NE",
		2: "IN",
		3: "MIN",
		4: "REGULAR",
	}
	OptType_value = map[string]int32{
		"EQ":      0,
		"NE":      1,
		"IN":      2,
		"MIN":     3,
		"REGULAR": 4,
	}
)

func (x OptType) Enum() *OptType {
	p := new(OptType)
	*p = x
	return p
}

func (x OptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptType) Descriptor() protoreflect.EnumDescriptor {
	return file_domain_policy_proto_enumTypes[0].Descriptor()
}

func (OptType) Type() protoreflect.EnumType {
	return &file_domain_policy_proto_enumTypes[0]
}

func (x OptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptType.Descriptor instead.
func (OptType) EnumDescriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{0}
}

type TagType int32

const (
	TagType_System    TagType = 0
	TagType_URI       TagType = 1
	TagType_HEADERS   TagType = 2
	TagType_AUTHORITY TagType = 3
	TagType_METHOD    TagType = 4
	TagType_SCHEME    TagType = 5
	TagType_PARAMS    TagType = 6
	TagType_LABELS    TagType = 7
	TagType_COOKIE    TagType = 8
	TagType_CUSTOM    TagType = 9
)

// Enum value maps for TagType.
var (
	TagType_name = map[int32]string{
		0: "System",
		1: "URI",
		2: "HEADERS",
		3: "AUTHORITY",
		4: "METHOD",
		5: "SCHEME",
		6: "PARAMS",
		7: "LABELS",
		8: "COOKIE",
		9: "CUSTOM",
	}
	TagType_value = map[string]int32{
		"System":    0,
		"URI":       1,
		"HEADERS":   2,
		"AUTHORITY": 3,
		"METHOD":    4,
		"SCHEME":    5,
		"PARAMS":    6,
		"LABELS":    7,
		"COOKIE":    8,
		"CUSTOM":    9,
	}
)

func (x TagType) Enum() *TagType {
	p := new(TagType)
	*p = x
	return p
}

func (x TagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TagType) Descriptor() protoreflect.EnumDescriptor {
	return file_domain_policy_proto_enumTypes[1].Descriptor()
}

func (TagType) Type() protoreflect.EnumType {
	return &file_domain_policy_proto_enumTypes[1]
}

func (x TagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TagType.Descriptor instead.
func (TagType) EnumDescriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{1}
}

type PolicyRateLimitLevel int32

const (
	PolicyRateLimitLevel_SERVICERATELIMITLEVEL PolicyRateLimitLevel = 0
	PolicyRateLimitLevel_APIRATELIMITLEVEL     PolicyRateLimitLevel = 1
)

// Enum value maps for PolicyRateLimitLevel.
var (
	PolicyRateLimitLevel_name = map[int32]string{
		0: "SERVICERATELIMITLEVEL",
		1: "APIRATELIMITLEVEL",
	}
	PolicyRateLimitLevel_value = map[string]int32{
		"SERVICERATELIMITLEVEL": 0,
		"APIRATELIMITLEVEL":     1,
	}
)

func (x PolicyRateLimitLevel) Enum() *PolicyRateLimitLevel {
	p := new(PolicyRateLimitLevel)
	*p = x
	return p
}

func (x PolicyRateLimitLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyRateLimitLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_domain_policy_proto_enumTypes[2].Descriptor()
}

func (PolicyRateLimitLevel) Type() protoreflect.EnumType {
	return &file_domain_policy_proto_enumTypes[2]
}

func (x PolicyRateLimitLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyRateLimitLevel.Descriptor instead.
func (PolicyRateLimitLevel) EnumDescriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{2}
}

type MeshServicePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mesh              string           `protobuf:"bytes,1,opt,name=mesh,proto3" json:"mesh,omitempty"`
	ServiceName       string           `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ParentServiceName string           `protobuf:"bytes,3,opt,name=parentServiceName,proto3" json:"parentServiceName,omitempty"`
	ServiceNamespace  string           `protobuf:"bytes,4,opt,name=serviceNamespace,proto3" json:"serviceNamespace,omitempty"`
	ServiceLinkeds    *ServiceLinkeds  `protobuf:"bytes,5,opt,name=serviceLinkeds,proto3" json:"serviceLinkeds,omitempty"`
	TcpRoutes         *TcpRoutes       `protobuf:"bytes,6,opt,name=tcpRoutes,proto3" json:"tcpRoutes,omitempty"`
	Routes            *Routes          `protobuf:"bytes,7,opt,name=routes,proto3" json:"routes,omitempty"`
	LoadBalances      *LoadBalances    `protobuf:"bytes,8,opt,name=loadBalances,proto3" json:"loadBalances,omitempty"`
	RateLimits        *RateLimits      `protobuf:"bytes,9,opt,name=rateLimits,proto3" json:"rateLimits,omitempty"`
	Auths             *Auths           `protobuf:"bytes,10,opt,name=auths,proto3" json:"auths,omitempty"`
	CircuitBreakers   *CircuitBreakers `protobuf:"bytes,11,opt,name=circuitBreakers,proto3" json:"circuitBreakers,omitempty"`
	Degradeds         *Degradeds       `protobuf:"bytes,12,opt,name=degradeds,proto3" json:"degradeds,omitempty"`
}

func (x *MeshServicePolicy) Reset() {
	*x = MeshServicePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeshServicePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshServicePolicy) ProtoMessage() {}

func (x *MeshServicePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshServicePolicy.ProtoReflect.Descriptor instead.
func (*MeshServicePolicy) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{0}
}

func (x *MeshServicePolicy) GetMesh() string {
	if x != nil {
		return x.Mesh
	}
	return ""
}

func (x *MeshServicePolicy) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *MeshServicePolicy) GetParentServiceName() string {
	if x != nil {
		return x.ParentServiceName
	}
	return ""
}

func (x *MeshServicePolicy) GetServiceNamespace() string {
	if x != nil {
		return x.ServiceNamespace
	}
	return ""
}

func (x *MeshServicePolicy) GetServiceLinkeds() *ServiceLinkeds {
	if x != nil {
		return x.ServiceLinkeds
	}
	return nil
}

func (x *MeshServicePolicy) GetTcpRoutes() *TcpRoutes {
	if x != nil {
		return x.TcpRoutes
	}
	return nil
}

func (x *MeshServicePolicy) GetRoutes() *Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *MeshServicePolicy) GetLoadBalances() *LoadBalances {
	if x != nil {
		return x.LoadBalances
	}
	return nil
}

func (x *MeshServicePolicy) GetRateLimits() *RateLimits {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

func (x *MeshServicePolicy) GetAuths() *Auths {
	if x != nil {
		return x.Auths
	}
	return nil
}

func (x *MeshServicePolicy) GetCircuitBreakers() *CircuitBreakers {
	if x != nil {
		return x.CircuitBreakers
	}
	return nil
}

func (x *MeshServicePolicy) GetDegradeds() *Degradeds {
	if x != nil {
		return x.Degradeds
	}
	return nil
}

type Degradeds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Degradeds []*Degraded `protobuf:"bytes,1,rep,name=degradeds,proto3" json:"degradeds,omitempty"`
}

func (x *Degradeds) Reset() {
	*x = Degradeds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Degradeds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Degradeds) ProtoMessage() {}

func (x *Degradeds) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Degradeds.ProtoReflect.Descriptor instead.
func (*Degradeds) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{1}
}

func (x *Degradeds) GetDegradeds() []*Degraded {
	if x != nil {
		return x.Degradeds
	}
	return nil
}

type CircuitBreakers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitBreakers []*CircuitBreaker `protobuf:"bytes,1,rep,name=circuitBreakers,proto3" json:"circuitBreakers,omitempty"`
}

func (x *CircuitBreakers) Reset() {
	*x = CircuitBreakers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreakers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreakers) ProtoMessage() {}

func (x *CircuitBreakers) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreakers.ProtoReflect.Descriptor instead.
func (*CircuitBreakers) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{2}
}

func (x *CircuitBreakers) GetCircuitBreakers() []*CircuitBreaker {
	if x != nil {
		return x.CircuitBreakers
	}
	return nil
}

type Auths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Auths []*Auth `protobuf:"bytes,1,rep,name=auths,proto3" json:"auths,omitempty"`
}

func (x *Auths) Reset() {
	*x = Auths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auths) ProtoMessage() {}

func (x *Auths) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auths.ProtoReflect.Descriptor instead.
func (*Auths) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{3}
}

func (x *Auths) GetAuths() []*Auth {
	if x != nil {
		return x.Auths
	}
	return nil
}

type RateLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RateLimits []*RateLimit `protobuf:"bytes,1,rep,name=rateLimits,proto3" json:"rateLimits,omitempty"`
}

func (x *RateLimits) Reset() {
	*x = RateLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimits) ProtoMessage() {}

func (x *RateLimits) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimits.ProtoReflect.Descriptor instead.
func (*RateLimits) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{4}
}

func (x *RateLimits) GetRateLimits() []*RateLimit {
	if x != nil {
		return x.RateLimits
	}
	return nil
}

type LoadBalances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadBalances []*LoadBalance `protobuf:"bytes,1,rep,name=loadBalances,proto3" json:"loadBalances,omitempty"`
}

func (x *LoadBalances) Reset() {
	*x = LoadBalances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalances) ProtoMessage() {}

func (x *LoadBalances) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalances.ProtoReflect.Descriptor instead.
func (*LoadBalances) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{5}
}

func (x *LoadBalances) GetLoadBalances() []*LoadBalance {
	if x != nil {
		return x.LoadBalances
	}
	return nil
}

type TcpRoutes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TcpRoutes []*TCPRoute `protobuf:"bytes,1,rep,name=tcpRoutes,proto3" json:"tcpRoutes,omitempty"`
}

func (x *TcpRoutes) Reset() {
	*x = TcpRoutes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpRoutes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpRoutes) ProtoMessage() {}

func (x *TcpRoutes) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpRoutes.ProtoReflect.Descriptor instead.
func (*TcpRoutes) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{6}
}

func (x *TcpRoutes) GetTcpRoutes() []*TCPRoute {
	if x != nil {
		return x.TcpRoutes
	}
	return nil
}

type ServiceLinkeds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceLinkeds []*ServiceLinked `protobuf:"bytes,1,rep,name=serviceLinkeds,proto3" json:"serviceLinkeds,omitempty"`
}

func (x *ServiceLinkeds) Reset() {
	*x = ServiceLinkeds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLinkeds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLinkeds) ProtoMessage() {}

func (x *ServiceLinkeds) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLinkeds.ProtoReflect.Descriptor instead.
func (*ServiceLinkeds) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{7}
}

func (x *ServiceLinkeds) GetServiceLinkeds() []*ServiceLinked {
	if x != nil {
		return x.ServiceLinkeds
	}
	return nil
}

type Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Routes []*Route `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (x *Routes) Reset() {
	*x = Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routes) ProtoMessage() {}

func (x *Routes) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routes.ProtoReflect.Descriptor instead.
func (*Routes) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{8}
}

func (x *Routes) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

type Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enable bool         `protobuf:"varint,3,opt,name=enable,json=enabled,proto3" json:"enable,omitempty"`
	Time   string       `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	Rules  []*RouteRule `protobuf:"bytes,5,rep,name=rules,json=routeRules,proto3" json:"rules,omitempty"`
}

func (x *Route) Reset() {
	*x = Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{9}
}

func (x *Route) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Route) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Route) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Route) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *Route) GetRules() []*RouteRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type RouteRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order             uint32             `protobuf:"varint,1,opt,name=order,proto3" json:"order,omitempty"`
	Conditions        []*Condition       `protobuf:"bytes,2,rep,name=conditions,proto3" json:"conditions,omitempty"`
	UpStreams         []*Upstream        `protobuf:"bytes,3,rep,name=upStreams,json=expectations,proto3" json:"upStreams,omitempty"`
	Fault             *Fault             `protobuf:"bytes,4,opt,name=fault,json=faultRule,proto3" json:"fault,omitempty"`
	RedirectOrRewrite *RedirectOrRewrite `protobuf:"bytes,5,opt,name=redirectOrRewrite,proto3" json:"redirectOrRewrite,omitempty"`
	Headers           []*Header          `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty"`
	Mirror            *Upstream          `protobuf:"bytes,7,opt,name=mirror,proto3" json:"mirror,omitempty"`
}

func (x *RouteRule) Reset() {
	*x = RouteRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteRule) ProtoMessage() {}

func (x *RouteRule) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteRule.ProtoReflect.Descriptor instead.
func (*RouteRule) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{10}
}

func (x *RouteRule) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *RouteRule) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *RouteRule) GetUpStreams() []*Upstream {
	if x != nil {
		return x.UpStreams
	}
	return nil
}

func (x *RouteRule) GetFault() *Fault {
	if x != nil {
		return x.Fault
	}
	return nil
}

func (x *RouteRule) GetRedirectOrRewrite() *RedirectOrRewrite {
	if x != nil {
		return x.RedirectOrRewrite
	}
	return nil
}

func (x *RouteRule) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RouteRule) GetMirror() *Upstream {
	if x != nil {
		return x.Mirror
	}
	return nil
}

type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagType string `protobuf:"bytes,1,opt,name=tagType,proto3" json:"tagType,omitempty"`
	OpType  string `protobuf:"bytes,2,opt,name=opType,proto3" json:"opType,omitempty"`
	Key     string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value   string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{11}
}

func (x *Condition) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *Condition) GetOpType() string {
	if x != nil {
		return x.OpType
	}
	return ""
}

func (x *Condition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Condition) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Upstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagType string    `protobuf:"bytes,1,opt,name=tagType,proto3" json:"tagType,omitempty"`
	Weight  uint32    `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Key     string    `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value   string    `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Headers []*Header `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *Upstream) Reset() {
	*x = Upstream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upstream) ProtoMessage() {}

func (x *Upstream) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upstream.ProtoReflect.Descriptor instead.
func (*Upstream) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{12}
}

func (x *Upstream) GetTagType() string {
	if x != nil {
		return x.TagType
	}
	return ""
}

func (x *Upstream) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Upstream) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Upstream) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Upstream) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

type Fault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Abort *AbortRule `protobuf:"bytes,1,opt,name=abort,proto3" json:"abort,omitempty"`
	Delay *DelayRule `protobuf:"bytes,2,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *Fault) Reset() {
	*x = Fault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fault) ProtoMessage() {}

func (x *Fault) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fault.ProtoReflect.Descriptor instead.
func (*Fault) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{13}
}

func (x *Fault) GetAbort() *AbortRule {
	if x != nil {
		return x.Abort
	}
	return nil
}

func (x *Fault) GetDelay() *DelayRule {
	if x != nil {
		return x.Delay
	}
	return nil
}

type RedirectOrRewrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operate      string `protobuf:"bytes,1,opt,name=operate,proto3" json:"operate,omitempty"`
	Url          string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Authority    string `protobuf:"bytes,3,opt,name=authority,proto3" json:"authority,omitempty"`
	RedirectCode uint32 `protobuf:"varint,4,opt,name=redirectCode,proto3" json:"redirectCode,omitempty"`
}

func (x *RedirectOrRewrite) Reset() {
	*x = RedirectOrRewrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectOrRewrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectOrRewrite) ProtoMessage() {}

func (x *RedirectOrRewrite) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectOrRewrite.ProtoReflect.Descriptor instead.
func (*RedirectOrRewrite) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{14}
}

func (x *RedirectOrRewrite) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *RedirectOrRewrite) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RedirectOrRewrite) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *RedirectOrRewrite) GetRedirectCode() uint32 {
	if x != nil {
		return x.RedirectCode
	}
	return 0
}

// route header
type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadType string `protobuf:"bytes,1,opt,name=headType,json=type,proto3" json:"headType,omitempty"`
	Operate  string `protobuf:"bytes,2,opt,name=operate,proto3" json:"operate,omitempty"`
	Key      string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value    string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{15}
}

func (x *Header) GetHeadType() string {
	if x != nil {
		return x.HeadType
	}
	return ""
}

func (x *Header) GetOperate() string {
	if x != nil {
		return x.Operate
	}
	return ""
}

func (x *Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AbortRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percentage int64  `protobuf:"varint,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	HttpStatus int32  `protobuf:"varint,2,opt,name=httpStatus,proto3" json:"httpStatus,omitempty"`
	GrpcStatus string `protobuf:"bytes,3,opt,name=grpcStatus,proto3" json:"grpcStatus,omitempty"`
	Http2Error string `protobuf:"bytes,4,opt,name=http2Error,proto3" json:"http2Error,omitempty"`
}

func (x *AbortRule) Reset() {
	*x = AbortRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbortRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbortRule) ProtoMessage() {}

func (x *AbortRule) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbortRule.ProtoReflect.Descriptor instead.
func (*AbortRule) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{16}
}

func (x *AbortRule) GetPercentage() int64 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *AbortRule) GetHttpStatus() int32 {
	if x != nil {
		return x.HttpStatus
	}
	return 0
}

func (x *AbortRule) GetGrpcStatus() string {
	if x != nil {
		return x.GrpcStatus
	}
	return ""
}

func (x *AbortRule) GetHttp2Error() string {
	if x != nil {
		return x.Http2Error
	}
	return ""
}

type DelayRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percentage       int32 `protobuf:"varint,1,opt,name=percentage,proto3" json:"percentage,omitempty"`
	FixDelay         int64 `protobuf:"varint,2,opt,name=fixDelay,proto3" json:"fixDelay,omitempty"`
	ExponentialDelay int64 `protobuf:"varint,3,opt,name=exponentialDelay,proto3" json:"exponentialDelay,omitempty"`
}

func (x *DelayRule) Reset() {
	*x = DelayRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelayRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelayRule) ProtoMessage() {}

func (x *DelayRule) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelayRule.ProtoReflect.Descriptor instead.
func (*DelayRule) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{17}
}

func (x *DelayRule) GetPercentage() int32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *DelayRule) GetFixDelay() int64 {
	if x != nil {
		return x.FixDelay
	}
	return 0
}

func (x *DelayRule) GetExponentialDelay() int64 {
	if x != nil {
		return x.ExponentialDelay
	}
	return 0
}

type ServiceLinked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MaxConnection            int32  `protobuf:"varint,2,opt,name=maxConnection,proto3" json:"maxConnection,omitempty"`
	MaxTimeOut               int32  `protobuf:"varint,3,opt,name=maxTimeOut,proto3" json:"maxTimeOut,omitempty"`
	Unit                     string `protobuf:"bytes,4,opt,name=unit,proto3" json:"unit,omitempty"`
	MaxRetry                 int32  `protobuf:"varint,5,opt,name=maxRetry,proto3" json:"maxRetry,omitempty"`
	MaxRequestsPerConnection int32  `protobuf:"varint,6,opt,name=maxRequestsPerConnection,proto3" json:"maxRequestsPerConnection,omitempty"`
	PreferIP                 bool   `protobuf:"varint,7,opt,name=preferIP,proto3" json:"preferIP,omitempty"`
	MTls                     string `protobuf:"bytes,8,opt,name=mTls,proto3" json:"mTls,omitempty"`
}

func (x *ServiceLinked) Reset() {
	*x = ServiceLinked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceLinked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceLinked) ProtoMessage() {}

func (x *ServiceLinked) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceLinked.ProtoReflect.Descriptor instead.
func (*ServiceLinked) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{18}
}

func (x *ServiceLinked) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ServiceLinked) GetMaxConnection() int32 {
	if x != nil {
		return x.MaxConnection
	}
	return 0
}

func (x *ServiceLinked) GetMaxTimeOut() int32 {
	if x != nil {
		return x.MaxTimeOut
	}
	return 0
}

func (x *ServiceLinked) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ServiceLinked) GetMaxRetry() int32 {
	if x != nil {
		return x.MaxRetry
	}
	return 0
}

func (x *ServiceLinked) GetMaxRequestsPerConnection() int32 {
	if x != nil {
		return x.MaxRequestsPerConnection
	}
	return 0
}

func (x *ServiceLinked) GetPreferIP() bool {
	if x != nil {
		return x.PreferIP
	}
	return false
}

func (x *ServiceLinked) GetMTls() string {
	if x != nil {
		return x.MTls
	}
	return ""
}

type TCPRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                      string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enable                    bool                        `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	TcpPolicyPortDestinations []*TcpPolicyPortDestination `protobuf:"bytes,4,rep,name=tcpPolicyPortDestinations,proto3" json:"tcpPolicyPortDestinations,omitempty"`
	CreateTime                string                      `protobuf:"bytes,5,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime                string                      `protobuf:"bytes,6,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *TCPRoute) Reset() {
	*x = TCPRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCPRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCPRoute) ProtoMessage() {}

func (x *TCPRoute) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCPRoute.ProtoReflect.Descriptor instead.
func (*TCPRoute) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{19}
}

func (x *TCPRoute) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TCPRoute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TCPRoute) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TCPRoute) GetTcpPolicyPortDestinations() []*TcpPolicyPortDestination {
	if x != nil {
		return x.TcpPolicyPortDestinations
	}
	return nil
}

func (x *TCPRoute) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TCPRoute) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type TcpPolicyPortDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port                  uint32                  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	TcpPolicyDestinations []*TcpPolicyDestination `protobuf:"bytes,2,rep,name=tcpPolicyDestinations,proto3" json:"tcpPolicyDestinations,omitempty"`
}

func (x *TcpPolicyPortDestination) Reset() {
	*x = TcpPolicyPortDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpPolicyPortDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpPolicyPortDestination) ProtoMessage() {}

func (x *TcpPolicyPortDestination) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpPolicyPortDestination.ProtoReflect.Descriptor instead.
func (*TcpPolicyPortDestination) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{20}
}

func (x *TcpPolicyPortDestination) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TcpPolicyPortDestination) GetTcpPolicyDestinations() []*TcpPolicyDestination {
	if x != nil {
		return x.TcpPolicyDestinations
	}
	return nil
}

type TcpPolicyDestination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port   uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Group  string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Weight int32  `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *TcpPolicyDestination) Reset() {
	*x = TcpPolicyDestination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpPolicyDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpPolicyDestination) ProtoMessage() {}

func (x *TcpPolicyDestination) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpPolicyDestination.ProtoReflect.Descriptor instead.
func (*TcpPolicyDestination) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{21}
}

func (x *TcpPolicyDestination) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *TcpPolicyDestination) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *TcpPolicyDestination) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

type LoadBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mesh         string `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
	Namespace    string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Application  string `protobuf:"bytes,4,opt,name=application,proto3" json:"application,omitempty"`
	ServiceId    string `protobuf:"bytes,5,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	ServiceName  string `protobuf:"bytes,6,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	StrategyName string `protobuf:"bytes,7,opt,name=strategyName,proto3" json:"strategyName,omitempty"`
	Retry        int32  `protobuf:"varint,8,opt,name=retry,proto3" json:"retry,omitempty"`
	TimeOut      int32  `protobuf:"varint,9,opt,name=timeOut,proto3" json:"timeOut,omitempty"`
	CreateTime   string `protobuf:"bytes,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime   string `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *LoadBalance) Reset() {
	*x = LoadBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalance) ProtoMessage() {}

func (x *LoadBalance) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalance.ProtoReflect.Descriptor instead.
func (*LoadBalance) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{22}
}

func (x *LoadBalance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LoadBalance) GetMesh() string {
	if x != nil {
		return x.Mesh
	}
	return ""
}

func (x *LoadBalance) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *LoadBalance) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *LoadBalance) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *LoadBalance) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *LoadBalance) GetStrategyName() string {
	if x != nil {
		return x.StrategyName
	}
	return ""
}

func (x *LoadBalance) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *LoadBalance) GetTimeOut() int32 {
	if x != nil {
		return x.TimeOut
	}
	return 0
}

func (x *LoadBalance) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *LoadBalance) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type RateLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RuleName   string       `protobuf:"bytes,2,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	Level      string       `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	Method     string       `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	LimitType  int32        `protobuf:"varint,5,opt,name=limitType,proto3" json:"limitType,omitempty"`
	Conditions []*Condition `protobuf:"bytes,6,rep,name=conditions,proto3" json:"conditions,omitempty"`
	TimeWindow int32        `protobuf:"varint,7,opt,name=timeWindow,proto3" json:"timeWindow,omitempty"`
	Count      int32        `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	Enable     bool         `protobuf:"varint,9,opt,name=enable,proto3" json:"enable,omitempty"`
	Comment    string       `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`
	UpdateTime string       `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *RateLimit) Reset() {
	*x = RateLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimit) ProtoMessage() {}

func (x *RateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimit.ProtoReflect.Descriptor instead.
func (*RateLimit) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{23}
}

func (x *RateLimit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RateLimit) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *RateLimit) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *RateLimit) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *RateLimit) GetLimitType() int32 {
	if x != nil {
		return x.LimitType
	}
	return 0
}

func (x *RateLimit) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *RateLimit) GetTimeWindow() int32 {
	if x != nil {
		return x.TimeWindow
	}
	return 0
}

func (x *RateLimit) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *RateLimit) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *RateLimit) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *RateLimit) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type Auth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mesh        string       `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
	Namespace   string       `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Application string       `protobuf:"bytes,4,opt,name=application,proto3" json:"application,omitempty"`
	Enable      bool         `protobuf:"varint,5,opt,name=enable,proto3" json:"enable,omitempty"`
	ServiceName string       `protobuf:"bytes,6,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	RuleName    string       `protobuf:"bytes,7,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	RuleType    int32        `protobuf:"varint,8,opt,name=ruleType,proto3" json:"ruleType,omitempty"`
	Conditions  []*Condition `protobuf:"bytes,9,rep,name=conditions,proto3" json:"conditions,omitempty"`
	CreateTime  string       `protobuf:"bytes,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime  string       `protobuf:"bytes,11,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *Auth) Reset() {
	*x = Auth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Auth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Auth) ProtoMessage() {}

func (x *Auth) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Auth.ProtoReflect.Descriptor instead.
func (*Auth) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{24}
}

func (x *Auth) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Auth) GetMesh() string {
	if x != nil {
		return x.Mesh
	}
	return ""
}

func (x *Auth) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Auth) GetApplication() string {
	if x != nil {
		return x.Application
	}
	return ""
}

func (x *Auth) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Auth) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Auth) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *Auth) GetRuleType() int32 {
	if x != nil {
		return x.RuleType
	}
	return 0
}

func (x *Auth) GetConditions() []*Condition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Auth) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Auth) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type CircuitBreaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Mesh                 string `protobuf:"bytes,2,opt,name=mesh,proto3" json:"mesh,omitempty"`
	Namespace            string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ServiceName          string `protobuf:"bytes,4,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	RuleName             string `protobuf:"bytes,5,opt,name=ruleName,proto3" json:"ruleName,omitempty"`
	ProviderName         string `protobuf:"bytes,6,opt,name=providerName,proto3" json:"providerName,omitempty"`
	Resource             string `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
	TimeWindow           int32  `protobuf:"varint,8,opt,name=timeWindow,proto3" json:"timeWindow,omitempty"`
	LeastRequestCount    int32  `protobuf:"varint,9,opt,name=leastRequestCount,proto3" json:"leastRequestCount,omitempty"`
	ErrorThreshold       int32  `protobuf:"varint,10,opt,name=errorThreshold,proto3" json:"errorThreshold,omitempty"`
	ResponseTime         int32  `protobuf:"varint,11,opt,name=responseTime,proto3" json:"responseTime,omitempty"`
	SlowRequestThreshold int32  `protobuf:"varint,12,opt,name=slowRequestThreshold,proto3" json:"slowRequestThreshold,omitempty"`
	Enable               bool   `protobuf:"varint,13,opt,name=enable,proto3" json:"enable,omitempty"`
	HalfOpen             int32  `protobuf:"varint,14,opt,name=halfOpen,proto3" json:"halfOpen,omitempty"`
	MaxBreakThreshold    int32  `protobuf:"varint,15,opt,name=maxBreakThreshold,proto3" json:"maxBreakThreshold,omitempty"`
	CreateTime           string `protobuf:"bytes,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime           string `protobuf:"bytes,17,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
}

func (x *CircuitBreaker) Reset() {
	*x = CircuitBreaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CircuitBreaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CircuitBreaker) ProtoMessage() {}

func (x *CircuitBreaker) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CircuitBreaker.ProtoReflect.Descriptor instead.
func (*CircuitBreaker) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{25}
}

func (x *CircuitBreaker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CircuitBreaker) GetMesh() string {
	if x != nil {
		return x.Mesh
	}
	return ""
}

func (x *CircuitBreaker) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CircuitBreaker) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CircuitBreaker) GetRuleName() string {
	if x != nil {
		return x.RuleName
	}
	return ""
}

func (x *CircuitBreaker) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *CircuitBreaker) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *CircuitBreaker) GetTimeWindow() int32 {
	if x != nil {
		return x.TimeWindow
	}
	return 0
}

func (x *CircuitBreaker) GetLeastRequestCount() int32 {
	if x != nil {
		return x.LeastRequestCount
	}
	return 0
}

func (x *CircuitBreaker) GetErrorThreshold() int32 {
	if x != nil {
		return x.ErrorThreshold
	}
	return 0
}

func (x *CircuitBreaker) GetResponseTime() int32 {
	if x != nil {
		return x.ResponseTime
	}
	return 0
}

func (x *CircuitBreaker) GetSlowRequestThreshold() int32 {
	if x != nil {
		return x.SlowRequestThreshold
	}
	return 0
}

func (x *CircuitBreaker) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *CircuitBreaker) GetHalfOpen() int32 {
	if x != nil {
		return x.HalfOpen
	}
	return 0
}

func (x *CircuitBreaker) GetMaxBreakThreshold() int32 {
	if x != nil {
		return x.MaxBreakThreshold
	}
	return 0
}

func (x *CircuitBreaker) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *CircuitBreaker) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

type Degraded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DegradedType    string           `protobuf:"bytes,2,opt,name=degradedType,proto3" json:"degradedType,omitempty"`
	Enable          bool             `protobuf:"varint,3,opt,name=enable,proto3" json:"enable,omitempty"`
	DegradedRewrite *DegradedRewrite `protobuf:"bytes,4,opt,name=degradedRewrite,proto3" json:"degradedRewrite,omitempty"`
	DegradedDelay   *DegradedDelay   `protobuf:"bytes,5,opt,name=degradedDelay,proto3" json:"degradedDelay,omitempty"`
	OffLineGroup    string           `protobuf:"bytes,6,opt,name=offLineGroup,proto3" json:"offLineGroup,omitempty"`
	DegradedFault   *DegradedFault   `protobuf:"bytes,7,opt,name=degradedFault,proto3" json:"degradedFault,omitempty"`
}

func (x *Degraded) Reset() {
	*x = Degraded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Degraded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Degraded) ProtoMessage() {}

func (x *Degraded) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Degraded.ProtoReflect.Descriptor instead.
func (*Degraded) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{26}
}

func (x *Degraded) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Degraded) GetDegradedType() string {
	if x != nil {
		return x.DegradedType
	}
	return ""
}

func (x *Degraded) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Degraded) GetDegradedRewrite() *DegradedRewrite {
	if x != nil {
		return x.DegradedRewrite
	}
	return nil
}

func (x *Degraded) GetDegradedDelay() *DegradedDelay {
	if x != nil {
		return x.DegradedDelay
	}
	return nil
}

func (x *Degraded) GetOffLineGroup() string {
	if x != nil {
		return x.OffLineGroup
	}
	return ""
}

func (x *Degraded) GetDegradedFault() *DegradedFault {
	if x != nil {
		return x.DegradedFault
	}
	return nil
}

type DegradedRewrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri        string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	ReWriteUri string `protobuf:"bytes,2,opt,name=reWriteUri,proto3" json:"reWriteUri,omitempty"`
}

func (x *DegradedRewrite) Reset() {
	*x = DegradedRewrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DegradedRewrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DegradedRewrite) ProtoMessage() {}

func (x *DegradedRewrite) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DegradedRewrite.ProtoReflect.Descriptor instead.
func (*DegradedRewrite) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{27}
}

func (x *DegradedRewrite) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DegradedRewrite) GetReWriteUri() string {
	if x != nil {
		return x.ReWriteUri
	}
	return ""
}

type DegradedDelay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri       string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	DelayTime int64  `protobuf:"varint,2,opt,name=delayTime,proto3" json:"delayTime,omitempty"`
}

func (x *DegradedDelay) Reset() {
	*x = DegradedDelay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DegradedDelay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DegradedDelay) ProtoMessage() {}

func (x *DegradedDelay) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DegradedDelay.ProtoReflect.Descriptor instead.
func (*DegradedDelay) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{28}
}

func (x *DegradedDelay) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DegradedDelay) GetDelayTime() int64 {
	if x != nil {
		return x.DelayTime
	}
	return 0
}

type DegradedFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri  string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Code int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *DegradedFault) Reset() {
	*x = DegradedFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_domain_policy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DegradedFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DegradedFault) ProtoMessage() {}

func (x *DegradedFault) ProtoReflect() protoreflect.Message {
	mi := &file_domain_policy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DegradedFault.ProtoReflect.Descriptor instead.
func (*DegradedFault) Descriptor() ([]byte, []int) {
	return file_domain_policy_proto_rawDescGZIP(), []int{29}
}

func (x *DegradedFault) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DegradedFault) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

var File_domain_policy_proto protoreflect.FileDescriptor

var file_domain_policy_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x22, 0xa3, 0x04, 0x0a, 0x11, 0x4d, 0x65,
	0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x3a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x74,
	0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x09, 0x74,
	0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0c,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x73, 0x52, 0x05, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x73, 0x52, 0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x2b, 0x0a, 0x09, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x73, 0x52, 0x09, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x73, 0x22,
	0x37, 0x0a, 0x09, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x09,
	0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x52, 0x09, 0x64,
	0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x73, 0x22, 0x4f, 0x0a, 0x0f, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x27, 0x0a, 0x05, 0x41, 0x75, 0x74,
	0x68, 0x73, 0x12, 0x1e, 0x0a, 0x05, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x05, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x22, 0x3b, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x12, 0x2d, 0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22,
	0x43, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x33, 0x0a, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x09, 0x54, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x43, 0x50, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x09, 0x74, 0x63, 0x70, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x4b, 0x0a,
	0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x73, 0x12,
	0x39, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x06, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xb5, 0x02, 0x0a,
	0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2d, 0x0a, 0x09, 0x75, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23,
	0x0a, 0x05, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f,
	0x72, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x52, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x11, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f,
	0x72, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x24,
	0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x6d, 0x69,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x65, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x08,
	0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x05, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x05, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x62, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x08, 0x68, 0x65, 0x61,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x09, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x32, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x32, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x73, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x69, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x66, 0x69, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x3a,
	0x0a, 0x18, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x18, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x49, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x54, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x54, 0x6c, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x08, 0x54,
	0x43, 0x50, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x74, 0x63, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x50, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x63, 0x70, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x74, 0x63, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50,
	0x6f, 0x72, 0x74, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x7e, 0x0a, 0x18, 0x54, 0x63, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x50, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x4e, 0x0a, 0x15, 0x74, 0x63, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x63, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x74, 0x63, 0x70, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x58, 0x0a, 0x14, 0x54, 0x63, 0x70, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xc5, 0x02, 0x0a, 0x0b, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x75,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xba, 0x02, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcb,
	0x02, 0x0a, 0x04, 0x41, 0x75, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x04, 0x0a,
	0x0e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12,
	0x2c, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x73, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xab, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0f, 0x64, 0x65, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x65, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x52, 0x0d, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x37, 0x0a, 0x0d, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0d,
	0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x43, 0x0a,
	0x0f, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x55,
	0x72, 0x69, 0x22, 0x3f, 0x0a, 0x0d, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x0d, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0x37, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x00, 0x12, 0x06, 0x0a,
	0x02, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41,
	0x52, 0x10, 0x04, 0x2a, 0x82, 0x01, 0x0a, 0x07, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55,
	0x52, 0x49, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x53, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0x07,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x45, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x09, 0x2a, 0x48, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x52, 0x41, 0x54, 0x45, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x50, 0x49, 0x52, 0x41, 0x54, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x01, 0x42, 0x23, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6a, 0x64, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x6a, 0x6d, 0x73, 0x66, 0x2e, 0x70, 0x62, 0x2e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x50, 0x01, 0x5a, 0x03, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_domain_policy_proto_rawDescOnce sync.Once
	file_domain_policy_proto_rawDescData = file_domain_policy_proto_rawDesc
)

func file_domain_policy_proto_rawDescGZIP() []byte {
	file_domain_policy_proto_rawDescOnce.Do(func() {
		file_domain_policy_proto_rawDescData = protoimpl.X.CompressGZIP(file_domain_policy_proto_rawDescData)
	})
	return file_domain_policy_proto_rawDescData
}

var file_domain_policy_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_domain_policy_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_domain_policy_proto_goTypes = []interface{}{
	(OptType)(0),                     // 0: v1.OptType
	(TagType)(0),                     // 1: v1.TagType
	(PolicyRateLimitLevel)(0),        // 2: v1.PolicyRateLimitLevel
	(*MeshServicePolicy)(nil),        // 3: v1.MeshServicePolicy
	(*Degradeds)(nil),                // 4: v1.Degradeds
	(*CircuitBreakers)(nil),          // 5: v1.CircuitBreakers
	(*Auths)(nil),                    // 6: v1.Auths
	(*RateLimits)(nil),               // 7: v1.RateLimits
	(*LoadBalances)(nil),             // 8: v1.LoadBalances
	(*TcpRoutes)(nil),                // 9: v1.TcpRoutes
	(*ServiceLinkeds)(nil),           // 10: v1.ServiceLinkeds
	(*Routes)(nil),                   // 11: v1.Routes
	(*Route)(nil),                    // 12: v1.Route
	(*RouteRule)(nil),                // 13: v1.RouteRule
	(*Condition)(nil),                // 14: v1.Condition
	(*Upstream)(nil),                 // 15: v1.Upstream
	(*Fault)(nil),                    // 16: v1.Fault
	(*RedirectOrRewrite)(nil),        // 17: v1.RedirectOrRewrite
	(*Header)(nil),                   // 18: v1.Header
	(*AbortRule)(nil),                // 19: v1.AbortRule
	(*DelayRule)(nil),                // 20: v1.DelayRule
	(*ServiceLinked)(nil),            // 21: v1.ServiceLinked
	(*TCPRoute)(nil),                 // 22: v1.TCPRoute
	(*TcpPolicyPortDestination)(nil), // 23: v1.TcpPolicyPortDestination
	(*TcpPolicyDestination)(nil),     // 24: v1.TcpPolicyDestination
	(*LoadBalance)(nil),              // 25: v1.LoadBalance
	(*RateLimit)(nil),                // 26: v1.RateLimit
	(*Auth)(nil),                     // 27: v1.Auth
	(*CircuitBreaker)(nil),           // 28: v1.CircuitBreaker
	(*Degraded)(nil),                 // 29: v1.Degraded
	(*DegradedRewrite)(nil),          // 30: v1.DegradedRewrite
	(*DegradedDelay)(nil),            // 31: v1.DegradedDelay
	(*DegradedFault)(nil),            // 32: v1.DegradedFault
}
var file_domain_policy_proto_depIdxs = []int32{
	10, // 0: v1.MeshServicePolicy.serviceLinkeds:type_name -> v1.ServiceLinkeds
	9,  // 1: v1.MeshServicePolicy.tcpRoutes:type_name -> v1.TcpRoutes
	11, // 2: v1.MeshServicePolicy.routes:type_name -> v1.Routes
	8,  // 3: v1.MeshServicePolicy.loadBalances:type_name -> v1.LoadBalances
	7,  // 4: v1.MeshServicePolicy.rateLimits:type_name -> v1.RateLimits
	6,  // 5: v1.MeshServicePolicy.auths:type_name -> v1.Auths
	5,  // 6: v1.MeshServicePolicy.circuitBreakers:type_name -> v1.CircuitBreakers
	4,  // 7: v1.MeshServicePolicy.degradeds:type_name -> v1.Degradeds
	29, // 8: v1.Degradeds.degradeds:type_name -> v1.Degraded
	28, // 9: v1.CircuitBreakers.circuitBreakers:type_name -> v1.CircuitBreaker
	27, // 10: v1.Auths.auths:type_name -> v1.Auth
	26, // 11: v1.RateLimits.rateLimits:type_name -> v1.RateLimit
	25, // 12: v1.LoadBalances.loadBalances:type_name -> v1.LoadBalance
	22, // 13: v1.TcpRoutes.tcpRoutes:type_name -> v1.TCPRoute
	21, // 14: v1.ServiceLinkeds.serviceLinkeds:type_name -> v1.ServiceLinked
	12, // 15: v1.Routes.routes:type_name -> v1.Route
	13, // 16: v1.Route.rules:type_name -> v1.RouteRule
	14, // 17: v1.RouteRule.conditions:type_name -> v1.Condition
	15, // 18: v1.RouteRule.upStreams:type_name -> v1.Upstream
	16, // 19: v1.RouteRule.fault:type_name -> v1.Fault
	17, // 20: v1.RouteRule.redirectOrRewrite:type_name -> v1.RedirectOrRewrite
	18, // 21: v1.RouteRule.headers:type_name -> v1.Header
	15, // 22: v1.RouteRule.mirror:type_name -> v1.Upstream
	18, // 23: v1.Upstream.headers:type_name -> v1.Header
	19, // 24: v1.Fault.abort:type_name -> v1.AbortRule
	20, // 25: v1.Fault.delay:type_name -> v1.DelayRule
	23, // 26: v1.TCPRoute.tcpPolicyPortDestinations:type_name -> v1.TcpPolicyPortDestination
	24, // 27: v1.TcpPolicyPortDestination.tcpPolicyDestinations:type_name -> v1.TcpPolicyDestination
	14, // 28: v1.RateLimit.conditions:type_name -> v1.Condition
	14, // 29: v1.Auth.conditions:type_name -> v1.Condition
	30, // 30: v1.Degraded.degradedRewrite:type_name -> v1.DegradedRewrite
	31, // 31: v1.Degraded.degradedDelay:type_name -> v1.DegradedDelay
	32, // 32: v1.Degraded.degradedFault:type_name -> v1.DegradedFault
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_domain_policy_proto_init() }
func file_domain_policy_proto_init() {
	if File_domain_policy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_domain_policy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeshServicePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Degradeds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreakers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpRoutes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLinkeds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upstream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectOrRewrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbortRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelayRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceLinked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCPRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpPolicyPortDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpPolicyDestination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Auth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CircuitBreaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Degraded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DegradedRewrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DegradedDelay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_domain_policy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DegradedFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_domain_policy_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_domain_policy_proto_goTypes,
		DependencyIndexes: file_domain_policy_proto_depIdxs,
		EnumInfos:         file_domain_policy_proto_enumTypes,
		MessageInfos:      file_domain_policy_proto_msgTypes,
	}.Build()
	File_domain_policy_proto = out.File
	file_domain_policy_proto_rawDesc = nil
	file_domain_policy_proto_goTypes = nil
	file_domain_policy_proto_depIdxs = nil
}
