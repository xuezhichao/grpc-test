// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: strategy_syncer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StrategySyncer_GetStrategy_FullMethodName    = "/v1.StrategySyncer/GetStrategy"
	StrategySyncer_StreamStrategy_FullMethodName = "/v1.StrategySyncer/StreamStrategy"
)

// StrategySyncerClient is the client API for StrategySyncer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StrategySyncerClient interface {
	// Get Strategy
	GetStrategy(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Payload, error)
	// Common Bi Stream strategy request
	StreamStrategy(ctx context.Context, opts ...grpc.CallOption) (StrategySyncer_StreamStrategyClient, error)
}

type strategySyncerClient struct {
	cc grpc.ClientConnInterface
}

func NewStrategySyncerClient(cc grpc.ClientConnInterface) StrategySyncerClient {
	return &strategySyncerClient{cc}
}

func (c *strategySyncerClient) GetStrategy(ctx context.Context, in *Payload, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, StrategySyncer_GetStrategy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *strategySyncerClient) StreamStrategy(ctx context.Context, opts ...grpc.CallOption) (StrategySyncer_StreamStrategyClient, error) {
	stream, err := c.cc.NewStream(ctx, &StrategySyncer_ServiceDesc.Streams[0], StrategySyncer_StreamStrategy_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &strategySyncerStreamStrategyClient{stream}
	return x, nil
}

type StrategySyncer_StreamStrategyClient interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ClientStream
}

type strategySyncerStreamStrategyClient struct {
	grpc.ClientStream
}

func (x *strategySyncerStreamStrategyClient) Send(m *Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *strategySyncerStreamStrategyClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StrategySyncerServer is the server API for StrategySyncer service.
// All implementations must embed UnimplementedStrategySyncerServer
// for forward compatibility
type StrategySyncerServer interface {
	// Get Strategy
	GetStrategy(context.Context, *Payload) (*Payload, error)
	// Common Bi Stream strategy request
	StreamStrategy(StrategySyncer_StreamStrategyServer) error
	mustEmbedUnimplementedStrategySyncerServer()
}

// UnimplementedStrategySyncerServer must be embedded to have forward compatible implementations.
type UnimplementedStrategySyncerServer struct {
}

func (UnimplementedStrategySyncerServer) GetStrategy(context.Context, *Payload) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStrategy not implemented")
}
func (UnimplementedStrategySyncerServer) StreamStrategy(StrategySyncer_StreamStrategyServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamStrategy not implemented")
}
func (UnimplementedStrategySyncerServer) mustEmbedUnimplementedStrategySyncerServer() {}

// UnsafeStrategySyncerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StrategySyncerServer will
// result in compilation errors.
type UnsafeStrategySyncerServer interface {
	mustEmbedUnimplementedStrategySyncerServer()
}

func RegisterStrategySyncerServer(s grpc.ServiceRegistrar, srv StrategySyncerServer) {
	s.RegisterService(&StrategySyncer_ServiceDesc, srv)
}

func _StrategySyncer_GetStrategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Payload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategySyncerServer).GetStrategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StrategySyncer_GetStrategy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategySyncerServer).GetStrategy(ctx, req.(*Payload))
	}
	return interceptor(ctx, in, info, handler)
}

func _StrategySyncer_StreamStrategy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StrategySyncerServer).StreamStrategy(&strategySyncerStreamStrategyServer{stream})
}

type StrategySyncer_StreamStrategyServer interface {
	Send(*Payload) error
	Recv() (*Payload, error)
	grpc.ServerStream
}

type strategySyncerStreamStrategyServer struct {
	grpc.ServerStream
}

func (x *strategySyncerStreamStrategyServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *strategySyncerStreamStrategyServer) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StrategySyncer_ServiceDesc is the grpc.ServiceDesc for StrategySyncer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StrategySyncer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.StrategySyncer",
	HandlerType: (*StrategySyncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStrategy",
			Handler:    _StrategySyncer_GetStrategy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamStrategy",
			Handler:       _StrategySyncer_StreamStrategy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "strategy_syncer.proto",
}
